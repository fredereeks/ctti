// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum BatchType {
  Morning
  Afternoon
  Evening
}

enum Status {
  Pending
  Active
  Suspended
}

enum UserType {
  User
  Instructor
  Admin
}



model Category {
  id String @id @default(cuid())
  name String @db.VarChar(200) @unique
  courses Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  updatedBy String?
}

model Contact {
  id String @id @default(cuid())
  firstname String
  middlename String?
  lastname String
  email String 
  phone String 
  country String?
  state String?
  message String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  updatedBy String?
}

model Course {
  id String @id @default(cuid())
  title String @db.VarChar(100)
  price Int?
  duration String
  description String?
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
  enquiry Enquiry[]
  rating Rating[]
  instructors Instructor[]
  batches Batch[]
  status Status @default(Active)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  updatedBy String?
}


model Instructor {
  id String @id @default(cuid())
  user User? @relation(fields: [userId], references: [id])
  userId String
  course Course? @relation(fields: [courseId], references: [id])
  courseId String
}

model Batch {
  id String @id @default(cuid())
  startDate DateTime
  month String
  type BatchType @default(Morning)
  course Course? @relation(fields: [courseId], references: [id])
  courseId String
}

model Enquiry {
  id String @id @default(cuid())
  firstname String
  middlename String?
  lastname String
  email String 
  phone String?
  image String?
  type UserType @default(User)
  message String @db.MediumText()
  country String?
  state String?
  course Course @relation(fields: [courseId], references: [id])
  courseId String @unique 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  updatedBy String?
}

model User {
  id String @id @default(cuid())
  firstname String
  middlename String?
  lastname String
  email String @unique
  phone String @unique
  password String
  image String?
  course Instructor[]
  address String? @db.MediumText()
  status Status @default(Pending)
  type UserType @default(User)
  token String? @db.VarChar(40)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  updatedBy String?
}

model Rating {
  id String @id @default(cuid())
  firstname String
  middlename String?
  lastname String
  email String @unique
  course Course @relation(fields: [courseId], references: [id])
  courseId String @unique
  value Int
  text String @db.VarChar(300)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  updatedBy String?
}